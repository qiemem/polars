initSidebarItems({"enum":[["AggExpr",""],["Excluded",""],["Expr","Queries consists of multiple expressions."],["Operator",""]],"fn":[["apply_mul","Apply a function/closure over the groups of multiple columns. This should only be used in a groupby aggregation."],["binary_expr",""],["lit","Create a Literal Expression from `L`"],["map_list_mul","Apply a function/closure over multiple columns once the logical plan get executed."],["map_mul","Apply a function/closure over multiple columns once the logical plan get executed."],["ternary_expr",""],["when","Start a when-then-otherwise expression"]],"mod":[["string",""]],"struct":[["NoEq","Wrapper type that indicates that the inner type is not equal to anything"],["StrpTimeOptions",""],["When","Intermediate state of `when(..).then(..).otherwise(..)` expr."],["WhenThen","Intermediate state of `when(..).then(..).otherwise(..)` expr."],["WhenThenThen","Intermediate state of chain when then exprs."]],"trait":[["BinaryUdfOutputField",""],["FunctionOutputField",""],["SeriesBinaryUdf","A wrapper trait for any binary closure `Fn(Series, Series) -> Result<Series>`"],["SeriesUdf","A wrapper trait for any closure `Fn(Vec<Series>) -> Result<Series>`"]],"type":[["GetOutput",""]]});